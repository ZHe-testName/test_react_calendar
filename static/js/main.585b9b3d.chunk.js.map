{"version":3,"sources":["store/reducers/auth/types.ts","hooks/useTypedSelector.ts","store/reducers/event/types.ts","services/UserService.ts","store/reducers/auth/auth_reducer.ts","store/reducers/event/event_reducer.ts","routes/routes.ts","store/reducers/actionCreators.ts","hooks/useDispatchedActions.ts","utils/formValidatorRules.ts","components/LoginForm.tsx","pages/Login.tsx","utils/formatDate.ts","components/EventCalendar.tsx","components/EventForm.tsx","components/EventModalForm.tsx","pages/Events.tsx","components/AppRouter.tsx","components/Navbar.tsx","App.tsx","store/reducers/reducers_obj/reducers.ts","store/store.ts","index.tsx"],"names":["AuthActionEnum","useTypedSelector","useSelector","EventsActionEnum","UserService","axios","get","initialState","isAuth","user","isLoading","error","authActionCreators","setUser","type","SET_USER","payload","setError","SET_ERROR","setIsAuth","SET_AUTH","switchIsLoading","SWITCH_IS_LOAD","login","username","password","dispatch","a","setTimeout","getUsers","then","res","data","find","mockUser","localStorage","setItem","logout","removeItem","authReducer","state","action","RouteNames","events","guests","selectDate","eventsActionCreators","setUsers","users","SET_USERS","setEvents","SET_EVENTS","setSelectedDate","date","SET_SELECTED_DATE","fetchUsersThunk","responce","console","log","createEventThunk","event","getItem","json","JSON","parse","push","currentUserEventsArr","filter","guest","stringify","fetchEventThunk","fetchIsDoneThunk","isDone","eventId","newEvents","map","id","eventReducer","actoinCreators","useDispatchedActions","useDispatch","bindActionCreators","rules","required","message","isDateAfter","validator","_","value","isSameOrAfter","moment","Promise","resolve","reject","Error","LoginForm","onFinish","values","style","color","Item","label","name","Password","htmlType","loading","Login","justify","align","className","formatDate","slice","EventCalendar","showEventModal","onSelect","toJSON","dateCellRender","dayEventsArr","listStyleType","padding","status","text","description","EventForm","submit","useState","author","setEvent","v1","TextArea","onChange","e","target","setDate","Option","EventModalForm","thisDateEventsAuthors","thisDateEvents","Set","forEach","length","i","icon","UserOutlined","shape","marginRight","backgroundColor","display","flexDirection","marginLeft","checked","Text","fontSize","Events","isVisible","setIsVisible","isModalVisible","setIsModalVisible","useEffect","margin","size","onClick","title","visible","footer","onCancel","privateRoutes","path","EVENTS","exact","component","publicRoutes","LOGIN","AppRouter","route","key","to","Navbar","router","useHistory","Header","theme","mode","selectable","justifyContent","cursor","disabled","App","Content","reducers","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mLASYA,E,oFCJCC,EAAwDC,I,sFDIzDF,K,oBAAAA,E,oBAAAA,E,gCAAAA,E,uBAAAA,M,SEKAG,E,oCCTSC,E,oIACjB,uGACWC,IAAMC,IAAgB,iBADjC,2C,6DCDEC,EAA8B,CAChCC,QAAQ,EACRC,KAAM,GACNC,WAAW,EACXC,MAAO,IAuCEC,EAAqB,CAC9BC,QAAS,SAACJ,GAAD,MAAuC,CAACK,KAAMd,EAAee,SAAUC,QAASP,IACzFQ,SAAU,SAACN,GAAD,MAAsC,CAACG,KAAMd,EAAekB,UAAWF,QAASL,IAC1FQ,UAAW,SAACX,GAAD,MAAwC,CAACM,KAAMd,EAAeoB,SAAUJ,QAASR,IAC5Fa,gBAAiB,SAACX,GAAD,MAA2C,CAACI,KAAMd,EAAesB,eAAgBN,QAASN,IAE3Ga,MAAO,SAACC,EAAkBC,GAAnB,8CAAwC,WAAOC,GAAP,SAAAC,EAAA,sDAC3C,IACID,EAASd,EAAmBS,iBAAgB,IAC5CK,EAASd,EAAmBK,SAAS,KAErCW,WAAU,sBAAE,4BAAAD,EAAA,sEACevB,EAAYyB,WAC9BC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,KAAKC,MAAK,SAAAxB,GAAI,OAAIA,EAAKe,WAAaA,GACdf,EAAKgB,WAAaA,QAHrD,UACFS,EADE,8BAMAR,EAASd,EAAmBK,SAAS,2CACrCS,EAASd,EAAmBS,iBAAgB,IAP5C,0BAaJc,aAAaC,QAAQ,OAAQ,QAC7BD,aAAaC,QAAQ,OAAQF,EAASV,UAEtCE,EAASd,EAAmBC,QAAQqB,IACpCR,EAASd,EAAmBO,WAAU,IACtCO,EAASd,EAAmBS,iBAAgB,IAlBxC,4CAmBV,MAEJ,MAAOV,GACLe,EAASd,EAAmBK,SAAS,UA3BE,2CAAxC,uDA+BPoB,OAAQ,kBAAM,SAACX,GACXS,aAAaG,WAAW,QACxBH,aAAaG,WAAW,QAExBZ,EAASd,EAAmBO,WAAU,IACtCO,EAASd,EAAmBC,QAAQ,QAI7B0B,EAlFK,WAAmF,IAAlFC,EAAiF,uDAA1DjC,EAAckC,EAA4C,uCAClG,OAAQA,EAAO3B,MACX,KAAKd,EAAeoB,SAChB,OAAO,2BACAoB,GADP,IAEIhC,OAAQiC,EAAOzB,UAIvB,KAAKhB,EAAee,SAChB,OAAO,2BACAyB,GADP,IAEI/B,KAAMgC,EAAOzB,UAIrB,KAAKhB,EAAekB,UAChB,OAAO,2BACAsB,GADP,IAEI7B,MAAO8B,EAAOzB,UAItB,KAAKhB,EAAesB,eAChB,OAAO,2BACAkB,GADP,IAEI9B,UAAW+B,EAAOzB,UAI1B,QACI,OAAOwB,K,SF7BPrC,K,sBAAAA,E,wBAAAA,E,sCAAAA,E,2BAAAA,M,KGRZ,ICMYuC,EDNNnC,EAA2B,CAC7BoC,OAAQ,GACRC,OAAQ,GACRC,WAAY,IAyCHC,EAAuB,CAChCC,SAAU,SAACC,GAAD,MAA0C,CAAClC,KAAMX,EAAiB8C,UAAWjC,QAASgC,IAChGE,UAAW,SAACP,GAAD,MAA6C,CAAC7B,KAAMX,EAAiBgD,WAAYnC,QAAS2B,IACrGS,gBAAiB,SAACC,GAAD,MAAqC,CAACvC,KAAMX,EAAiBmD,kBAAmBtC,QAASqC,IAM1GE,gBAAiB,yDAAM,WAAO7B,GAAP,eAAAC,EAAA,+EAEQvB,EAAYyB,WAFpB,OAET2B,EAFS,OAIf9B,EAASoB,EAAqBC,SAASS,EAASxB,OAJjC,gDAMfyB,QAAQC,IAAR,MANe,yDAAN,uDAUjBC,iBAAkB,SAACC,EAAmBpC,GAApB,8CAAyC,WAAOE,GAAP,mBAAAC,EAAA,sDACvD,IACUgB,EAASR,aAAa0B,QAAQ,WAAa,MAE3CC,EAAOC,KAAKC,MAAMrB,IACnBsB,KAAKL,GAEJM,EAAuBJ,EAAKK,QAAO,SAAAP,GAAK,OAAIA,EAAMQ,QAAU5C,KAElEE,EAASoB,EAAqBI,UAAUgB,IAExC/B,aAAaC,QAAQ,SAAU2B,KAAKM,UAAUP,IAChD,MAAOnD,GACL8C,QAAQC,IAAI/C,GAbuC,2CAAzC,uDAiBlB2D,gBAAiB,SAAC9C,GAAD,OAAsB,SAACE,GACpC,IACI,IAAMiB,EAASR,aAAa0B,QAAQ,WAAa,KAI3CK,EAFOH,KAAKC,MAAMrB,GAEUwB,QAAO,SAAAP,GAAK,OAAIA,EAAMQ,QAAU5C,KAElEE,EAASoB,EAAqBI,UAAUgB,IAC1C,MAAOvD,GACL8C,QAAQC,IAAI/C,MAIpB4D,iBAAkB,SAACC,EAAiBC,EAAiBjD,GAAnC,OAAwD,SAACE,GACvE,IACI,IAAMiB,EAASR,aAAa0B,QAAQ,WAAa,KAI3Ca,EAFOX,KAAKC,MAAMrB,GAEDgC,KAAI,SAAAf,GAAK,OAAIA,EAAMgB,KAAOH,EAAb,2BAC0Bb,GAD1B,IACiCY,OAAQA,IACnBZ,KAE1DzB,aAAaC,QAAQ,SAAU2B,KAAKM,UAAUK,IAE9ChD,EAASoB,EAAqBI,UAAUwB,EAAUP,QAAO,SAAAP,GAAK,OAAIA,EAAMQ,QAAU5C,OACpF,MAAOb,GACL8C,QAAQC,IAAI/C,OAKTkE,EA3GM,WAA6E,IAA5ErC,EAA2E,uDAAvDjC,EAAckC,EAAyC,uCAC7F,OAAQA,EAAO3B,MACX,KAAKX,EAAiB8C,UAClB,OAAO,2BACAT,GADP,IAEII,OAAQH,EAAOzB,UAIvB,KAAKb,EAAiBgD,WAClB,OAAO,2BACAX,GADP,IAEIG,OAAQF,EAAOzB,UAIvB,KAAKb,EAAiBmD,kBAClB,OAAO,2BACAd,GADP,IAEIK,WAAYJ,EAAOzB,UAa3B,QACI,OAAOwB,IE1CNsC,EAAc,2BACpBlE,GACAkC,GCEMiC,EAAuB,WAChC,IAAMrD,EAAWsD,cAEjB,OAAOC,YAAmBH,EAAgBpD,I,iBCS/BwD,EAjBD,CACVC,SAAU,SAACC,GAAD,MAAsB,CAC5BD,UAAU,EACVC,YAGJC,YAAa,SAACD,GAAD,MAAsB,CAC/BE,UAD+B,SACrBC,EAAQC,GACd,OAAIA,EAAMC,cAAcC,OACbC,QAAQC,UAGZD,QAAQE,OAAO,IAAIC,MAAMV,Q,OCkC7BW,EA1CG,WAAO,IAAD,EACO9F,GAAiB,SAAAuC,GAAK,OAAIA,EAAMD,eAApD7B,EADa,EACbA,UAAWC,EADE,EACFA,MAEVY,EAAUwD,IAAVxD,MAMR,OACI,eAAC,IAAD,CACIyE,SANS,SAACC,GACd1E,EAAM0E,EAAOzE,SAAUyE,EAAOxE,WAI9B,UAGQd,GAAS,qBAAKuF,MAAO,CAACC,MAAO,UAApB,SACJxF,IAGT,cAAC,IAAKyF,KAAN,CACIC,MAAM,YACNC,KAAK,WACLpB,MAAO,CAACA,EAAMC,SAAS,4BAH3B,SAKI,cAAC,IAAD,MAGJ,cAAC,IAAKiB,KAAN,CACIC,MAAM,WACNC,KAAK,WACLpB,MAAO,CAACA,EAAMC,SAAS,gCAH3B,SAKI,cAAC,IAAMoB,SAAP,MAGJ,cAAC,IAAKH,KAAN,UACI,cAAC,IAAD,CAAQtF,KAAK,UAAU0F,SAAS,SAASC,QAAS/F,EAAlD,0BCxBDgG,EAZG,WACd,OACI,cAAC,IAAD,UACI,cAAC,IAAD,CAAKC,QAAQ,SAASC,MAAM,SAASC,UAAU,OAA/C,SACQ,cAAC,IAAD,UACI,cAAC,EAAD,W,mCCTXC,EAAa,SAACzD,GACvB,OAAOA,EAAK0D,MAAM,EAAG,KC4CVC,EAjCgC,SAAC,GAAgC,IAA9BrE,EAA6B,EAA7BA,OAAQsE,EAAqB,EAArBA,eAC/C7D,EAAmB2B,IAAnB3B,gBAyBP,OACI,cAAC,IAAD,CACI8D,SAzBS,SAAC1B,GACdpC,EAAgB0D,EAAWtB,EAAM2B,WAEjCF,KAuBIG,eApBR,SAAwB5B,GACpB,IAAMnC,EAAOyD,EAAWtB,EAAM2B,UAExBE,EAAe1E,EAAOwB,QAAO,SAAAP,GAAK,OAAIA,EAAMP,OAASA,KAC3D,OACE,oBAAI6C,MAAO,CAACoB,cAAe,OAAQC,QAAS,OAA5C,SAEQF,EAAa1C,KAAI,SAAAf,GAAK,OAAI,6BACtB,cAAC,IAAD,CACM4D,OAAQ5D,EAAMY,OAAS,UAAY,UACnCiD,KAAM7D,EAAM8D,eAHa9D,EAAMgB,a,2BCmD5C+C,EAhE2B,SAAC,GAAwB,IAAtB/E,EAAqB,EAArBA,OAAQgF,EAAa,EAAbA,OAAa,EACpCC,mBAAqB,CAC3CC,OAAQ,GACRzE,KAAM,GACNqE,YAAa,GACbtD,MAAO,GACPI,QAAQ,EACRI,GAAI,KAPsD,mBACvDhB,EADuD,KAChDmE,EADgD,KAUtDtH,EAASR,GAAiB,SAAAuC,GAAK,OAAIA,EAAMD,eAAzC9B,KAYR,OACI,eAAC,IAAD,CACIuF,SAZS,WACb4B,EAAO,2BAAIhE,GAAL,IAAYkE,OAAQrH,EAAKe,SAAUoD,GAAIoD,kBAU7C,UAEI,cAAC,IAAK5B,KAAN,CACIC,MAAM,gBACNC,KAAK,cACLpB,MAAO,CAACA,EAAMC,SAAS,mBAH3B,SAII,cAAC,IAAM8C,SAAP,CACIzC,MAAO5B,EAAM8D,YACbQ,SAAU,SAACC,GAAD,OAAwCJ,EAAS,2BAAInE,GAAL,IAAY8D,YAAaS,EAAEC,OAAO5C,cAGpG,cAAC,IAAKY,KAAN,CACKC,MAAM,cACNC,KAAK,OACLpB,MAAO,CAACA,EAAMC,SAAS,oBAAqBD,EAAMG,YAAY,kDAHnE,SAII,cAAC,IAAD,CACI6C,SAAU,SAAA7E,GAAI,OAvBd,SAACA,GACTA,GACA0E,EAAS,2BAAInE,GAAL,IAAYP,KAAMyD,EAAWzD,EAAK8D,aAqBhBkB,CAAQhF,QAGlC,cAAC,IAAK+C,KAAN,CACKC,MAAM,kBACNC,KAAK,WACLpB,MAAO,CAACA,EAAMC,SAAS,yBAH5B,SAII,cAAC,IAAD,CAAQ+C,SAAU,SAAC9D,GAAD,OAAmB2D,EAAS,2BAAInE,GAAL,IAAYQ,YAAzD,SACMxB,EAAO+B,KAAI,SAAAlE,GAAI,OAAI,cAAC,IAAO6H,OAAR,CAEG9C,MAAO/E,EAAKe,SAFf,SAE2Bf,EAAKe,UADxBf,EAAKgB,iBAK1C,cAAC,IAAD,CAAKkF,QAAQ,MAAb,SACI,cAAC,IAAKP,KAAN,UACI,cAAC,IAAD,CACItF,KAAK,UACL0F,SAAS,SAFb,yB,uCCSL+B,GAnEqC,SAAC,GAA4B,IAA1B5F,EAAyB,EAAzBA,OAAQE,EAAiB,EAAjBA,WACnD0B,EAAqBQ,IAArBR,iBAEFiE,EAAkC,GAChC/H,EAASR,GAAiB,SAAAuC,GAAK,OAAIA,EAAMD,eAAzC9B,KAEFgI,EAAiB9F,EAAOwB,QAAO,SAAAP,GAAK,OAAIA,EAAMP,OAASR,KAK7D,OAHA,IAAI6F,IAAID,EAAe9D,KAAI,SAAAf,GAAK,OAAIA,EAAMkE,WACrCa,SAAQ,SAAAb,GAAM,OAAIU,EAAsBvE,KAAK6D,MAG9C,cAAC,IAAD,UAEUW,EAAeG,OAQXJ,EAAsB7D,KAAI,SAACmD,EAAQe,GAAT,OACxB,eAAC,IAAKzC,KAAN,CAEIC,MAAM,SAFV,UAGI,gCACI,cAAC,KAAD,CACIyC,KAAO,cAACC,GAAA,EAAD,IACPC,MAAM,SACN9C,MAAO,CACK+C,YAAa,OACb9C,MAAO,QACP+C,gBAAiB,YAG5BpB,KAGT,qBAAK5B,MAAO,CACIiD,QAAS,OACTC,cAAe,UAF/B,SAIQX,EACKtE,QAAO,SAAAP,GAAK,OAAIA,EAAMkE,SAAWA,KACjCnD,KAAI,SAAAf,GAAK,OAAI,gCACV,cAAC,IAAD,CACI4D,OAAQ5D,EAAMY,OAAS,UAAY,UACnCiD,KAAM7D,EAAM8D,YACZxB,MAAO,CAACmD,WAAY,UAExB,cAAC,KAAD,CACInB,SAAU,WAAO3D,GAAkBX,EAAMY,OAAQZ,EAAMgB,GAAInE,EAAKe,WAChE8H,QAAS1F,EAAMY,OACf0B,MAAO,CAACmD,WAAY,QAHxB,oBANoBzF,EAAMgB,WArBrCkD,EAASe,MARpB,cAAC,IAAWU,KAAZ,CACczI,KAAK,SACLoF,MAAO,CAACsD,SAAU,QAFhC,6CC6CPC,GAhEI,WAAO,IAAD,EACa5B,oBAAS,GADtB,mBACd6B,EADc,KACHC,EADG,OAEuB9B,oBAAS,GAFhC,mBAEd+B,EAFc,KAEEC,EAFF,OAI0C9E,IAAvDxB,EAJa,EAIbA,gBAAiBI,EAJJ,EAIIA,iBAAkBW,EAJtB,EAIsBA,gBAJtB,EAKkBrE,GAAiB,SAAAuC,GAAK,OAAIA,EAAMqC,gBAA/DjC,EALa,EAKbA,OAAQD,EALK,EAKLA,OAAQE,EALH,EAKGA,WAChBpC,EAASR,GAAiB,SAAAuC,GAAK,OAAIA,EAAMD,eAAzC9B,KAERqJ,qBAAU,WACNvG,IAEAe,EAAgB7D,EAAKe,YACtB,IAYH,OACI,gCACI,cAAC,EAAD,CAAemB,OAASA,EAASsE,eANlB,WACnB4C,GAAkB,MAOd,cAAC,IAAD,CAAKlD,QAAQ,SAAST,MAAO,CAAC6D,OAAQ,YAAtC,SACI,cAAC,IAAD,CACIC,KAAK,QACLlJ,KAAK,UACLmJ,QAAS,WAAON,GAAa,IAHjC,yBAQJ,eAAC,IAAD,CACIO,MAAM,eACNC,QAAST,EACTU,OAAQ,KACRC,SAAU,WAAOV,GAAa,IAJlC,UAMI,qEAEA,cAAC,EAAD,CAAW/G,OAASA,EAASgF,OA/B1B,SAAChE,GACZD,EAAiBC,EAAOnD,EAAKe,UAE7BmI,GAAa,SA+BT,eAAC,IAAD,CACIO,MAAM,WACNC,QAASP,EACTQ,OAAQ,KACRC,SAAU,WACNR,GAAkB,IAL1B,UAQI,mDAEA,cAAC,GAAD,CAAgBlH,OAAQA,EAAQE,WAAYA,Y,SVvDhDH,K,eAAAA,E,YAAAA,M,KAKL,IAAM4H,GAA0B,CACnC,CAACC,KAAM7H,EAAW8H,OAAQC,OAAO,EAAMC,UAAWjB,KAGzCkB,GAAyB,CAClC,CAACJ,KAAM7H,EAAWkI,MAAOH,OAAO,EAAMC,UAAWhE,IWYtCmE,GAzBG,WAId,OAHe5K,GAAiB,SAAAuC,GAAK,OAAIA,EAAMD,YAAY/B,UAM/C,eAAC,IAAD,WAEQ8J,GAAc3F,KAAI,SAAAmG,GAAK,OAAI,wBAAC,IAAD,2BAAWA,GAAX,IAAkBC,IAAKD,EAAMP,WAG5D,cAAC,IAAD,CAAUS,GAAItI,EAAW8H,YAG7B,eAAC,IAAD,WAEQG,GAAahG,KAAI,SAAAmG,GAAK,OAAI,wBAAC,IAAD,2BAAWA,GAAX,IAAkBC,IAAKD,EAAMP,WAG3D,cAAC,IAAD,CAAUS,GAAItI,EAAWkI,Y,UCiB9BK,GAxCA,WAKX,IAAMC,EAASC,cALE,EAOQlL,GAAiB,SAAAuC,GAAK,OAAIA,EAAMD,eAAjD/B,EAPS,EAOTA,OAAQC,EAPC,EAODA,KAER4B,EAAW0C,IAAX1C,OAER,OACQ,cAAC,IAAO+I,OAAR,UAEY5K,EAEK,eAAC,KAAD,CAAM6K,MAAM,OAAOC,KAAK,aAAaC,YAAY,EAAOrF,MAAO,CAACsF,eAAgB,YAAhF,UACO,cAAC,KAAKpF,KAAN,CACIF,MAAO,CAACC,MAAO,QACPsF,OAAQ,QAChBC,UAAU,EAHd,SAKMjL,EAAKe,UADF,GAIT,cAAC,KAAK4E,KAAN,CACI6D,QAAS,WAAQ5H,KADrB,mBAES,MAGhB,cAAC,KAAD,CAAMgJ,MAAM,OAAOC,KAAK,aAAaC,YAAY,EAAOrF,MAAO,CAACsF,eAAgB,YAAhF,SACG,cAAC,KAAKpF,KAAN,CACI6D,QAAS,kBAAMiB,EAAOjH,KAAKvB,EAAWkI,QAD1C,kBAES,QCP1Be,GAxBC,WAAO,IAAD,EACS5G,IAAtB5D,EADa,EACbA,UAAWN,EADE,EACFA,QAUlB,OARAiJ,qBAAU,WACJ3H,aAAa0B,QAAQ,UACvB1C,GAAU,GAEVN,EAAQ,CAACW,SAAWW,aAAa0B,QAAQ,aAE1C,IAGD,cAAC,IAAD,UACE,sBAAKgD,UAAU,MAAf,UACE,cAAC,GAAD,IAEA,cAAC,IAAO+E,QAAR,UACE,cAAC,GAAD,Y,oBCjBKC,GALE,CACbtJ,cACAsC,gBCAEiH,GAAcC,YAAgBF,IAEvBG,GAAQC,YAAYH,GAAaI,YAAgBC,OCG9DC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUN,MAAOA,GAAjB,SACE,cAAC,KAAD,UACI,cAAC,GAAD,UAIRO,SAASC,eAAe,W","file":"static/js/main.585b9b3d.chunk.js","sourcesContent":["import { UserType } from '../../../models/IUser';\r\n\r\nexport interface AuthStateType {\r\n    isAuth: boolean,\r\n    user: UserType,\r\n    isLoading: boolean,\r\n    error: string,\r\n};\r\n\r\nexport enum AuthActionEnum {\r\n    SET_AUTH = 'SET_AUTH',\r\n    SET_USER = 'SET_USER',\r\n    SWITCH_IS_LOAD = 'SWITCH_IS_LOAD',\r\n    SET_ERROR = 'SET_ERROR',\r\n};\r\n\r\nexport interface AuthActionType {\r\n    type: AuthActionEnum.SET_AUTH,\r\n    payload: boolean,\r\n};\r\n\r\nexport interface SetUserActionType {\r\n    type: AuthActionEnum.SET_USER,\r\n    payload: UserType,\r\n};\r\n\r\nexport interface LoadSwitcherActionType {\r\n    type: AuthActionEnum.SWITCH_IS_LOAD,\r\n    payload: boolean,\r\n};\r\n\r\nexport interface SetErrorActionType {\r\n    type: AuthActionEnum.SET_ERROR,\r\n    payload: string,\r\n};\r\n\r\nexport type AuthActionsTypes = AuthActionType\r\n                                | SetErrorActionType\r\n                                | SetUserActionType\r\n                                | LoadSwitcherActionType;","import { RootStateType } from './../store/store';\r\nimport { TypedUseSelectorHook, useSelector } from \"react-redux\";\r\n\r\n//custom hook needs to \"explain\" redux typescript what types needs to use \r\n//in useSelector hook\r\nexport const useTypedSelector: TypedUseSelectorHook<RootStateType> = useSelector;","import { IEventType } from \"../../../models/IEvent\";\r\nimport { UserType } from \"../../../models/IUser\";\r\n\r\ninterface IsDonePayloadType {\r\n    isDone: boolean,\r\n    eventId: string,\r\n};\r\n\r\nexport interface EventState {\r\n    guests: UserType[],\r\n    events: IEventType[],\r\n    selectDate: string,\r\n};\r\n\r\nexport enum EventsActionEnum {\r\n    SET_USERS = 'SET_USERS',\r\n    SET_EVENTS = 'SET_EVENTS',\r\n    SET_SELECTED_DATE = 'SET_SELECTED_DATE',\r\n    SET_IS_DONE = 'SET_IS_DONE',\r\n};\r\n\r\ninterface SetUsersActionType {\r\n    type: EventsActionEnum.SET_USERS,\r\n    payload: UserType[],\r\n};\r\n\r\n\r\ninterface SetEventsActionType {\r\n    type: EventsActionEnum.SET_EVENTS,\r\n    payload: IEventType[],\r\n};\r\n\r\ninterface SetSelectedDateActionType {\r\n    type: EventsActionEnum.SET_SELECTED_DATE,\r\n    payload: string,\r\n};\r\n\r\ninterface SetIsDoneActionType {\r\n    type: EventsActionEnum.SET_IS_DONE,\r\n    payload: IsDonePayloadType,\r\n};\r\n\r\nexport type EventActionsType = SetUsersActionType\r\n                            | SetEventsActionType\r\n                            | SetSelectedDateActionType\r\n                            | SetIsDoneActionType;","import axios, { AxiosResponse } from \"axios\";\r\nimport { UserType } from \"../models/IUser\";\r\n\r\n//used this class to avoid code repeating\r\n//in 'server' requests\r\nexport default class UserService {\r\n    static async getUsers() : Promise<AxiosResponse<UserType[]>>{\r\n        return axios.get<UserType[]>('./users.json');\r\n    }\r\n};","import { UserType } from \"../../../models/IUser\";\r\nimport { AuthActionEnum, AuthActionsTypes, AuthStateType } from \"./types\";\r\nimport { Dispatch } from \"redux\";\r\nimport UserService from '../../../services/UserService';\r\n\r\nconst initialState: AuthStateType = {\r\n    isAuth: false,\r\n    user: {} as UserType,\r\n    isLoading: false,\r\n    error: '',\r\n};\r\n\r\nconst authReducer = (state: AuthStateType = initialState, action: AuthActionsTypes): AuthStateType => {\r\n    switch (action.type){\r\n        case AuthActionEnum.SET_AUTH: {\r\n            return {\r\n                ...state,\r\n                isAuth: action.payload,\r\n            };\r\n        }\r\n\r\n        case AuthActionEnum.SET_USER: {\r\n            return {\r\n                ...state,\r\n                user: action.payload,\r\n            };\r\n        }\r\n\r\n        case AuthActionEnum.SET_ERROR: {\r\n            return {\r\n                ...state,\r\n                error: action.payload,\r\n            };\r\n        }\r\n\r\n        case AuthActionEnum.SWITCH_IS_LOAD: {\r\n            return {\r\n                ...state,\r\n                isLoading: action.payload,\r\n            };\r\n        }\r\n\r\n        default: {\r\n            return state;\r\n        }\r\n    };\r\n};\r\n\r\nexport const authActionCreators = {\r\n    setUser: (user: UserType): AuthActionsTypes => ({type: AuthActionEnum.SET_USER, payload: user}),\r\n    setError: (error: string): AuthActionsTypes => ({type: AuthActionEnum.SET_ERROR, payload: error}),\r\n    setIsAuth: (isAuth: boolean): AuthActionsTypes => ({type: AuthActionEnum.SET_AUTH, payload: isAuth}),\r\n    switchIsLoading: (isLoading: boolean): AuthActionsTypes => ({type: AuthActionEnum.SWITCH_IS_LOAD, payload: isLoading}),\r\n\r\n    login: (username: string, password: string) => async (dispatch: Dispatch) => {\r\n        try {\r\n            dispatch(authActionCreators.switchIsLoading(true));\r\n            dispatch(authActionCreators.setError(''));\r\n\r\n            setTimeout( async () => {\r\n                const mockUser = await UserService.getUsers()\r\n                    .then(res => res.data.find(user => user.username === username \r\n                                                        && user.password === password));\r\n\r\n                    if (!mockUser){\r\n                        dispatch(authActionCreators.setError('Entered uncorect username or password!'));\r\n                        dispatch(authActionCreators.switchIsLoading(false));\r\n\r\n                        return;\r\n                    };\r\n\r\n\r\n                    localStorage.setItem('auth', 'true');\r\n                    localStorage.setItem('user', mockUser.username);\r\n\r\n                    dispatch(authActionCreators.setUser(mockUser));\r\n                    dispatch(authActionCreators.setIsAuth(true));\r\n                    dispatch(authActionCreators.switchIsLoading(false));\r\n           }, 1500);\r\n\r\n        } catch (error) {\r\n            dispatch(authActionCreators.setError('Error'));\r\n        }\r\n    },\r\n\r\n    logout: () => (dispatch: Dispatch) => {\r\n        localStorage.removeItem('auth');\r\n        localStorage.removeItem('user');\r\n\r\n        dispatch(authActionCreators.setIsAuth(false));\r\n        dispatch(authActionCreators.setUser({} as UserType));\r\n    },\r\n};\r\n\r\nexport default authReducer;","import { Dispatch } from \"redux\";\r\nimport { IEventType } from \"../../../models/IEvent\";\r\nimport { UserType } from \"../../../models/IUser\";\r\nimport UserService from \"../../../services/UserService\";\r\nimport { EventActionsType, EventsActionEnum, EventState } from \"./types\";\r\n\r\nconst initialState: EventState = {\r\n    events: [],\r\n    guests: [],\r\n    selectDate: '',\r\n};\r\n\r\nconst eventReducer = (state: EventState = initialState, action: EventActionsType): EventState => {\r\n    switch (action.type){\r\n        case EventsActionEnum.SET_USERS: {\r\n            return {\r\n                ...state,\r\n                guests: action.payload,\r\n            };\r\n        }\r\n\r\n        case EventsActionEnum.SET_EVENTS: {\r\n            return {\r\n                ...state,\r\n                events: action.payload,\r\n            };\r\n        }\r\n\r\n        case EventsActionEnum.SET_SELECTED_DATE: {\r\n            return {\r\n                ...state,\r\n                selectDate: action.payload,\r\n            };\r\n        }\r\n\r\n        // case EventsActionEnum.SET_IS_DONE: {\r\n        //     return {\r\n        //         ...state,\r\n        //         events: state.events.map(event => event.id === action.payload.eventId\r\n        //                                                                             ? {...event, isDone: action.payload.isDone}\r\n        //                                                                             : event),\r\n        //     };\r\n        // }\r\n\r\n        default: {\r\n            return state;\r\n        }\r\n    };\r\n};\r\n\r\nexport const eventsActionCreators = {\r\n    setUsers: (users: UserType[]): EventActionsType => ({type: EventsActionEnum.SET_USERS, payload: users}),\r\n    setEvents: (events: IEventType[]): EventActionsType => ({type: EventsActionEnum.SET_EVENTS, payload: events}),\r\n    setSelectedDate: (date: string): EventActionsType => ({type: EventsActionEnum.SET_SELECTED_DATE, payload: date}),\r\n    // setIsDone: (isDone: boolean, eventId: string): EventActionsType => ({\r\n    //                                                                         type: EventsActionEnum.SET_IS_DONE, \r\n    //                                                                         payload: {isDone, eventId}\r\n    //                                                                     }),\r\n\r\n    fetchUsersThunk: () => async (dispatch: Dispatch) => {\r\n        try {\r\n            const responce = await UserService.getUsers();\r\n\r\n            dispatch(eventsActionCreators.setUsers(responce.data))\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    },\r\n\r\n    createEventThunk: (event: IEventType, username: string) => async (dispatch: Dispatch) => {\r\n        try {\r\n            const events = localStorage.getItem('events') || '[]';\r\n\r\n            const json = JSON.parse(events) as IEventType[];\r\n            json.push(event);\r\n\r\n            const currentUserEventsArr = json.filter(event => event.guest === username);\r\n\r\n            dispatch(eventsActionCreators.setEvents(currentUserEventsArr));\r\n\r\n            localStorage.setItem('events', JSON.stringify(json));\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    },\r\n\r\n    fetchEventThunk: (username: string) => (dispatch: Dispatch) => {\r\n        try {\r\n            const events = localStorage.getItem('events') || '[]';\r\n\r\n            const json = JSON.parse(events) as IEventType[];\r\n\r\n            const currentUserEventsArr = json.filter(event => event.guest === username);\r\n\r\n            dispatch(eventsActionCreators.setEvents(currentUserEventsArr));\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    },\r\n\r\n    fetchIsDoneThunk: (isDone: boolean, eventId: string, username: string) => (dispatch: Dispatch) => {\r\n        try {\r\n            const events = localStorage.getItem('events') || '[]';\r\n\r\n            const json = JSON.parse(events) as IEventType[];\r\n\r\n            const newEvents = json.map(event => event.id === eventId\r\n                                                                    ? {...event, isDone: isDone}\r\n                                                                    : event);\r\n\r\n            localStorage.setItem('events', JSON.stringify(newEvents));                                                      \r\n\r\n            dispatch(eventsActionCreators.setEvents(newEvents.filter(event => event.guest === username)));\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    },\r\n};\r\n\r\nexport default eventReducer;","import  React  from 'react';\r\nimport Login from '../pages/Login';\r\nimport Events from '../pages/Events';\r\n\r\n//creating routes type\r\nexport type IRoute = {\r\n    path: string,\r\n    component: React.ComponentType,\r\n    exact?: boolean,\r\n};\r\n\r\n//enums 4 easy changing routes path\r\nexport enum RouteNames {\r\n    LOGIN = '/login',\r\n    EVENTS = '/'\r\n};\r\n\r\nexport const privateRoutes: IRoute[] = [\r\n    {path: RouteNames.EVENTS, exact: true, component: Events}\r\n];\r\n\r\nexport const publicRoutes: IRoute[] = [\r\n    {path: RouteNames.LOGIN, exact: true, component: Login}\r\n];\r\n\r\n","import { authActionCreators } from \"./auth/auth_reducer\";\r\nimport { eventsActionCreators } from \"./event/event_reducer\";\r\n\r\nexport const actoinCreators = {\r\n    ...authActionCreators,\r\n    ...eventsActionCreators\r\n};","import { useDispatch } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport { actoinCreators } from '../store/reducers/actionCreators';\r\n\r\n//custom hook 4 optymization dispatching of actions\r\n//we can take actioncreators in any part of program\r\n//and call only requried function\r\nexport const useDispatchedActions = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    return bindActionCreators(actoinCreators, dispatch);\r\n};\r\n","import moment, { Moment } from 'moment';\r\n//object 4 adjusting form validator rules \r\nconst rules = {\r\n    required: (message: string) => ({\r\n        required: true,\r\n        message,\r\n    }),\r\n\r\n    isDateAfter: (message: string) => ({\r\n        validator(_: any, value: Moment) {\r\n            if (value.isSameOrAfter(moment())){\r\n                return Promise.resolve();\r\n            }\r\n\r\n            return Promise.reject(new Error(message));\r\n        },\r\n    }),\r\n};\r\n\r\nexport default rules;","import { Form, Input, Button } from 'antd';\r\nimport { useDispatchedActions } from '../hooks/useDispatchedActions';\r\nimport { useTypedSelector } from '../hooks/useTypedSelector';\r\nimport { UserType } from '../models/IUser';\r\nimport rules from '../utils/formValidatorRules';\r\n\r\nconst LoginForm = () => {\r\n    const {isLoading, error} = useTypedSelector(state => state.authReducer);\r\n\r\n    const { login } = useDispatchedActions();\r\n\r\n    const onFinish = (values: UserType) => {\r\n        login(values.username, values.password);\r\n    };\r\n\r\n    return (\r\n        <Form\r\n            onFinish={onFinish}>\r\n            {\r\n                error && <div style={{color: 'tomato'}}>\r\n                    {error}\r\n                </div>\r\n            }\r\n            <Form.Item\r\n                label=\"User Name\"\r\n                name=\"username\"\r\n                rules={[rules.required('Please input your name!')]}\r\n            >\r\n                <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                label=\"Password\"\r\n                name=\"password\"\r\n                rules={[rules.required('Please input your password!')]}\r\n            >\r\n                <Input.Password />\r\n            </Form.Item>\r\n\r\n            <Form.Item>\r\n                <Button type=\"primary\" htmlType=\"submit\" loading={isLoading}>\r\n                    Submit\r\n                </Button>\r\n            </Form.Item>\r\n        </Form>\r\n    );\r\n};\r\n\r\nexport default LoginForm;","import { Card, Layout, Row } from \"antd\";\r\nimport { FC } from \"react\";\r\nimport LoginForm from \"../components/LoginForm\";\r\n\r\nconst Login: FC = () => {\r\n    return (\r\n        <Layout>\r\n            <Row justify='center' align='middle' className='h100'>\r\n                    <Card>\r\n                        <LoginForm />\r\n                    </Card>\r\n            </Row>\r\n        </Layout>\r\n    );\r\n};\r\n\r\nexport default Login;","export const formatDate = (date: string) => {\r\n    return date.slice(0, 10);\r\n};","import { Badge, Calendar } from \"antd\";\r\nimport { Moment } from \"moment\";\r\nimport { FC } from \"react\";\r\nimport { useDispatchedActions } from \"../hooks/useDispatchedActions\";\r\nimport { IEventType } from \"../models/IEvent\";\r\nimport { formatDate } from \"../utils/formatDate\";\r\n\r\ninterface IEventCalendarProps {\r\n    events: IEventType[],\r\n    showEventModal: () => void,\r\n};\r\n\r\nconst EventCalendar: FC<IEventCalendarProps> = ({ events, showEventModal }) => {\r\n    const {setSelectedDate} = useDispatchedActions();\r\n\r\n    const onSelect = (value: Moment) => {\r\n        setSelectedDate(formatDate(value.toJSON()));\r\n\r\n        showEventModal();\r\n    };\r\n\r\n    function dateCellRender(value: Moment) {\r\n        const date = formatDate(value.toJSON());\r\n\r\n        const dayEventsArr = events.filter(event => event.date === date);\r\n        return (\r\n          <ul style={{listStyleType: 'none', padding: '0px'}}>\r\n              {\r\n                  dayEventsArr.map(event => <li key={event.id} >\r\n                      <Badge \r\n                            status={event.isDone ? 'default' : 'success' }\r\n                            text={event.description} />\r\n                  </li>)\r\n              }\r\n          </ul>\r\n        );\r\n      };\r\n\r\n    return (\r\n        <Calendar \r\n            onSelect={onSelect}\r\n            dateCellRender={dateCellRender}/>\r\n    );\r\n};\r\n\r\nexport default EventCalendar;","import { ChangeEvent, FC, useState } from \"react\";\r\nimport { Button, DatePicker, Form, Input, Row, Select } from 'antd';\r\nimport rules from \"../utils/formValidatorRules\";\r\nimport { IEventType } from \"../models/IEvent\";\r\nimport { UserType } from \"../models/IUser\";\r\nimport { Moment } from \"moment\";\r\nimport { useTypedSelector } from \"../hooks/useTypedSelector\";\r\nimport { formatDate } from \"../utils/formatDate\";\r\nimport { v1 } from 'uuid';\r\n\r\ninterface EventFormPropsType {\r\n    guests: UserType[],\r\n    submit: (event: IEventType) => void,\r\n};\r\n\r\nconst EventForm: FC<EventFormPropsType> = ({ guests, submit }) => {\r\n    const [event, setEvent] = useState<IEventType>({\r\n        author: '',\r\n        date: '',\r\n        description: '',\r\n        guest: '',\r\n        isDone: false,\r\n        id: '',\r\n    });\r\n\r\n    const { user } = useTypedSelector(state => state.authReducer);\r\n\r\n    const onFinish = () => {\r\n        submit({...event, author: user.username, id: v1()});\r\n    };\r\n\r\n    const setDate = (date: Moment | null) => {\r\n        if (date){\r\n            setEvent({...event, date: formatDate(date.toJSON())});\r\n        };\r\n    };\r\n\r\n    return (\r\n        <Form \r\n            onFinish={onFinish}>\r\n            <Form.Item\r\n                label='Event subject'\r\n                name='description'\r\n                rules={[rules.required('Required field')]}>\r\n                <Input.TextArea \r\n                    value={event.description}\r\n                    onChange={(e: ChangeEvent<HTMLTextAreaElement>)=> setEvent({...event, description: e.target.value})}/>\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                 label='Select date'\r\n                 name='date'\r\n                 rules={[rules.required('Date is required'), rules.isDateAfter('You can choose this day or feature date only.')]}>\r\n                <DatePicker \r\n                    onChange={date => setDate(date)}/>\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                 label='Select executor'\r\n                 name='executor'\r\n                 rules={[rules.required('Executor is required')]}>\r\n                <Select onChange={(guest: string) => setEvent({...event, guest})}>\r\n                    { guests.map(user => <Select.Option \r\n                                            key={user.password} \r\n                                            value={user.username}>{ user.username }</Select.Option>) }\r\n                </Select>\r\n            </Form.Item>\r\n\r\n            <Row justify='end'>\r\n                <Form.Item>\r\n                    <Button \r\n                        type='primary'\r\n                        htmlType='submit'>Add</Button>\r\n                </Form.Item>\r\n            </Row>\r\n        </Form>\r\n    );\r\n};\r\n\r\nexport default EventForm;","import { Avatar, Badge, Checkbox, Form, Typography } from \"antd\";\r\nimport { UserOutlined } from \"@ant-design/icons\";\r\nimport { FC } from \"react\";\r\nimport { IEventType } from \"../models/IEvent\";\r\nimport { useDispatchedActions } from \"../hooks/useDispatchedActions\";\r\nimport { useTypedSelector } from \"../hooks/useTypedSelector\";\r\n\r\ninterface EventModalFormPropsType {\r\n    events: IEventType[],\r\n    selectDate: string,\r\n};\r\n\r\nconst EventModalForm: FC<EventModalFormPropsType> = ({ events, selectDate }) => {\r\n    const { fetchIsDoneThunk } = useDispatchedActions();\r\n\r\n    const thisDateEventsAuthors: string[] = [];\r\n    const { user } = useTypedSelector(state => state.authReducer)\r\n    \r\n    const thisDateEvents = events.filter(event => event.date === selectDate);\r\n\r\n    new Set(thisDateEvents.map(event => event.author))\r\n        .forEach(author => thisDateEventsAuthors.push(author));\r\n\r\n    return (\r\n        <Form>\r\n            {\r\n                (!thisDateEvents.length)\r\n\r\n                    ? <Typography.Text \r\n                                    type='danger'\r\n                                    style={{fontSize: '21px'}}>\r\n                            No any events for this date.\r\n                        </Typography.Text>\r\n\r\n                    : thisDateEventsAuthors.map((author, i) => (\r\n                        <Form.Item\r\n                            key={author + i}\r\n                            label='author'>\r\n                            <div>\r\n                                <Avatar \r\n                                    icon={ <UserOutlined />} \r\n                                    shape='square'\r\n                                    style={{\r\n                                                marginRight: '10px', \r\n                                                color: 'white', \r\n                                                backgroundColor: 'tomato',\r\n                                            }}/>\r\n\r\n                                    {author}    \r\n                            </div>\r\n\r\n                            <div style={{\r\n                                            display: 'flex', \r\n                                            flexDirection: 'column'}}>\r\n                                {\r\n                                    thisDateEvents\r\n                                        .filter(event => event.author === author)\r\n                                        .map(event => <div key={event.id}>\r\n                                            <Badge \r\n                                                status={event.isDone ? 'default' : 'success'}\r\n                                                text={event.description}\r\n                                                style={{marginLeft: '40px'}}/>\r\n\r\n                                            <Checkbox\r\n                                                onChange={() => {fetchIsDoneThunk(!event.isDone, event.id, user.username)}}\r\n                                                checked={event.isDone}\r\n                                                style={{marginLeft: '40px'}}>\r\n                                                Done\r\n                                            </Checkbox>\r\n                                        </div>)\r\n                                }\r\n                            </div>\r\n                        </Form.Item>\r\n                    ))\r\n            }\r\n        </Form>\r\n    );\r\n};\r\n\r\nexport default EventModalForm;","import { Button, Modal, Row } from \"antd\";\r\nimport { FC, useEffect, useState } from \"react\";\r\nimport EventCalendar from \"../components/EventCalendar\";\r\nimport EventForm from \"../components/EventForm\";\r\nimport EventModalForm from \"../components/EventModalForm\";\r\nimport { useDispatchedActions } from \"../hooks/useDispatchedActions\";\r\nimport { useTypedSelector } from \"../hooks/useTypedSelector\";\r\nimport { IEventType } from \"../models/IEvent\";\r\n\r\nconst Events: FC = () => {\r\n    const [isVisible, setIsVisible] = useState(false);\r\n    const [isModalVisible, setIsModalVisible] = useState(false)\r\n\r\n    const { fetchUsersThunk, createEventThunk, fetchEventThunk } = useDispatchedActions();\r\n    const { guests, events, selectDate } = useTypedSelector(state => state.eventReducer);\r\n    const { user } = useTypedSelector(state => state.authReducer);\r\n\r\n    useEffect(() => {\r\n        fetchUsersThunk();\r\n\r\n        fetchEventThunk(user.username);\r\n    }, []);\r\n\r\n    const submit = (event: IEventType) => {\r\n        createEventThunk(event, user.username);\r\n\r\n        setIsVisible(false);\r\n    };\r\n\r\n    const showEventModal = () => {\r\n        setIsModalVisible(true);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <EventCalendar events={ events } showEventModal={showEventModal}/>\r\n            \r\n            <Row justify='center' style={{margin: '20px 0px'}}>\r\n                <Button\r\n                    size='large'\r\n                    type='primary'\r\n                    onClick={() => {setIsVisible(true)}}>\r\n                    Add Event\r\n                </Button>\r\n            </Row>\r\n\r\n            <Modal\r\n                title='Add an event'\r\n                visible={isVisible}\r\n                footer={null}\r\n                onCancel={() => {setIsVisible(false)}}>\r\n\r\n                <p>Create an event task for some one...</p>\r\n\r\n                <EventForm guests={ guests } submit={ submit }/>\r\n            </Modal>\r\n\r\n            <Modal\r\n                title='Event(s)'\r\n                visible={isModalVisible}\r\n                footer={null}\r\n                onCancel={() => {\r\n                    setIsModalVisible(false)\r\n                }}>\r\n\r\n                <p>Tasks for this day</p>\r\n\r\n                <EventModalForm events={events} selectDate={selectDate}/>\r\n            </Modal>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Events;","import React from 'react';\r\n\r\n//if any of route dousent fit we used redirect to basik route\r\nimport { Route, Switch, Redirect } from 'react-router-dom';\r\nimport { useTypedSelector } from '../hooks/useTypedSelector';\r\n\r\n//used 4 choosing one of incertad routes according browser find row\r\nimport { privateRoutes, publicRoutes, RouteNames } from '../routes/routes';\r\n\r\nconst AppRouter = () => {\r\n    const isAuth = useTypedSelector(state => state.authReducer.isAuth);\r\n\r\n    //if user in adress row entered some fake adress we use Redirect 4 send him to fixed page\r\n    return (\r\n            isAuth\r\n                ?\r\n                <Switch>\r\n                    {\r\n                        privateRoutes.map(route => <Route {...route} key={route.path}/>)\r\n                    }\r\n\r\n                    <Redirect to={RouteNames.EVENTS}/>\r\n                </Switch>\r\n                :\r\n                <Switch>\r\n                    {\r\n                        publicRoutes.map(route => <Route {...route} key={route.path}/>)\r\n                    }\r\n\r\n                    <Redirect to={RouteNames.LOGIN}/>\r\n                </Switch>\r\n    );\r\n};\r\n\r\nexport default AppRouter;","import { Layout, Menu } from \"antd\";\r\nimport { useHistory } from \"react-router\";\r\nimport { useDispatchedActions } from \"../hooks/useDispatchedActions\";\r\nimport { useTypedSelector } from \"../hooks/useTypedSelector\";\r\nimport { RouteNames } from \"../routes/routes\";\r\n\r\nconst Navbar = () => {\r\n    //create obj router with hook useHistory\r\n    //it needs 4 switching between our routes\r\n    //4 that we used proprty func push()\r\n    //and put into route path\r\n    const router = useHistory();\r\n\r\n    const { isAuth, user } = useTypedSelector(state => state.authReducer);\r\n\r\n    const { logout } = useDispatchedActions();\r\n\r\n    return (\r\n            <Layout.Header>\r\n                    {\r\n                        isAuth\r\n\r\n                            ?<Menu theme='dark' mode='horizontal' selectable={false} style={{justifyContent: 'flex-end'}}>\r\n                                    <Menu.Item \r\n                                        style={{color: 'white',\r\n                                                cursor: 'auto'}} \r\n                                        disabled={true}\r\n                                        key={1}>\r\n                                        { user.username }\r\n                                    </Menu.Item>\r\n\r\n                                    <Menu.Item \r\n                                        onClick={() => { logout() }} \r\n                                        key={2}>Logoff</Menu.Item>\r\n                                </Menu>\r\n                           \r\n                            :<Menu theme='dark' mode='horizontal' selectable={false} style={{justifyContent: 'flex-end'}}>\r\n                                <Menu.Item \r\n                                    onClick={() => router.push(RouteNames.LOGIN)} \r\n                                    key={1}>Login</Menu.Item>\r\n                            </Menu>\r\n                    }\r\n            </Layout.Header>\r\n    );\r\n};\r\n\r\nexport default Navbar;","import { Layout } from 'antd';\nimport React, { FC, useEffect } from 'react';\nimport './App.css';\nimport AppRouter from './components/AppRouter';\nimport Navbar from './components/Navbar';\nimport { useDispatchedActions } from './hooks/useDispatchedActions';\nimport { UserType } from './models/IUser';\n\nconst App: FC = () => {\n  const {setIsAuth, setUser} = useDispatchedActions();\n\n  useEffect(() => {\n    if (localStorage.getItem('auth')){\n      setIsAuth(true);\n\n      setUser({username : localStorage.getItem('user' || '')} as UserType);\n    };\n  }, []);\n\n  return (\n    <Layout>\n      <div className=\"App\">\n        <Navbar />\n\n        <Layout.Content>\n          <AppRouter/>\n        </Layout.Content>\n      </div>\n    </Layout>\n  );\n}\n\nexport default App;\n","import eventReducer from './../event/event_reducer';\r\nimport authReducer from \"../auth/auth_reducer\";\r\n\r\nconst reducers = {\r\n    authReducer,\r\n    eventReducer,\r\n};\r\n\r\nexport default reducers;","import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport reducers from './reducers/reducers_obj/reducers';\r\n\r\n//create common root reducer 4 redux\r\nconst rootReducer = combineReducers(reducers);\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nexport type RootStateType = ReturnType<typeof store.getState>;\r\nexport type AppDispatchType = typeof store.dispatch;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\nimport { store } from './store/store';\n\n//use Provider for binding Rect with Redux\n//use BrowserRouter 4 pages navigation\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <HashRouter>\n          <App />\n      </HashRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}